<< 에리엔진 리워크 사양 >>


  주요 플랫폼

    사용자 인터페이스: VueJS
    데이터 관리: loki.js
    데이터 트리뷰: clusterize.js (https://clusterize.js.org/)
    렌더링 엔진: LveJS


프로젝트 UUID

  모든 프로젝트는 UUID를 가지고 있다.
  이는 추후 앱으로 빌드할 때 고유식별인 appId를 UUID을 활용하여 만들도록 한다.


모듈 시스템

  추가/제거가 가능해야한다.
  각 프로젝트 폴더에는 Modules 폴더가 존재하며, 이곳에 각 모듈 폴더가 UUID로 존재한다.


인터페이스
스크립트
디자인
키워드
에셋

  각 파일로 만드는 방식은, 빌드 과정에서 너무 많은 에러를 발생하였고,
  히스토리 관리를 힘들게 하였다.

  따라서 데이터베이스를 이용하여 관리하도록 한다. (loki.js)


히스토리

  loki.js 로 데이터베이스를 이용하는 모든 작업은 History 개념을 추가하여, Undo 가 가능하도록 만들어야한다.
  히스토리는 Undo만을 지원하며, loki.js의 copy 기능을 이용하여, [ ${db이름}_${인덱스}.ehr ] 파일명 서식으로 관리한다.


저장

  데이터베이스는 임시 폴더에 저장되며,
  저장할 때 임시 폴더의 내용을 프로젝트 폴더로 이동시켜 덮어쓰기한다.
  임시 폴더에 있는 package.esv는 주기적으로 자동저장하기 위해 autosave 기능을 활성화한다.
  
  에셋 파일은 파일명 [ ${UUID}.eas ] 형식으로 저장된다.
  그 외의 에셋/인터페이스/스크립트/디자인/키워드 는 종합하여 [ package.esv ] 형식으로 저장된다.
  각 데이터는 Collection 을 경계로 나뉘게 된다. 아래와 같다.

  Game
    UUID
    Name
    Version,
    Developer

  Asset
    UUID
    Path
    MIME

  Script
    UUID
    Path
    Comment
    Events []
    Conditions []
    Actions []
    Next []

  Design
    UUID
    AssetId
    Path

  Interface
    UUID
    DesignId
    Path
    Style {}

  Keyword
    UUID
    Path
  


저장/디렉토리 구조

  에셋은 임시 폴더에 보관되지 않아야하지만, 반대로 모듈은 임시 폴더에 보관되어야 한다.
  이에 따른 디렉토리 구조는 아래과 같다.
  디렉토리에 모듈 디렉토리가 존재할 경우, 디렉토리 내부의 내용을 재귀함수를 이용하여 불러들인다.

  프로젝트 디렉토리 (UUID)
    Save
      기본 디렉토리 (UUID, 프로젝트 디렉토리명과 같다)
        Assets
          ...에셋 파일들
        package.esv
      모듈 디렉토리
        기본 디렉토리 (UUID)
          Assets
            ...에셋 파일들
    Backup
      ...[ package_${timestamp}.esv ]


불러오기

  임시 폴더 또는 프로젝트 폴더, 그 외 기타 장소에서 불러올 수 있는 가능성이 있으므로,
  매개변수로 불러올 수 있는 위치를 지정한다.
  이는 임시 폴더/프로젝트 폴더가 동일한 구조로 이루어져 있어야 불러오는데 오류를 발생시키지 않는다.

  프로젝트 디렉토리에 있는 모든 모듈 디렉토리 목록을 불러오며,
  해당 디렉토리들 하위에 있는 package.esv 에서 값들을 불러온다. Assets도 동일하다.


백업

  데이터가 날아가는 것을 방지하기 위해 package.esv를 [ package_${timestamp}.esv ] 형식으로 주기적으로 백업한다.
  이는 프로젝트 디렉토리/Backup 디렉토리에 저장된다.
  에셋은 백업되지 않는다.


데이터 선택

  스크립트 작성 시, 아이템 목록을 보여주는 방식은 TreeView 방식으로 보여주도록 한다.
  TreeView 에서 아이템 선택 시, 아이템 이름이 아닌 UUID가 선택된다.


TreeView

  데이터의 TreeView는 경로를 정할 수 있다.
    인터페이스: 만들어진 객체의 씬의 레벨을 경로 단위로 삼음 (Ex. 플레이::학교::교실 → 플레이/학교/교실)
    디자인: 사용자 지정
    에셋: 사용자 지정
    키워드: 특수문자 > 숫자 > abcd > 가나다라마바사 등 처럼 sort 순

  TreeView 에서는 디렉토리/파일 생성 버튼을 지원해야 한다.
  이는 현재 TreeView 에서 선택한 디렉토리를 기점으로 새로이 추가된다. 선택되지 않았다면 루트 디렉토리로 선택된다.
  아이템은 우클릭 - 컨텍스트메뉴에서 삭제할 수 있으며, Shift, Ctrl 등의 보조 기능을 이용하여 다수 선택할 수 있어야 한다.
  파일 및 디렉토리는 이름의 오름차순으로 정렬된다.


모달

  Electron 내부모듈인 Menu, MenuItem 등을 이용하여 메뉴와 컨텍스트 메뉴를 구성한다.
  새창은 더 이상 jQuery UI 를 사용하지 않고, BrowserWindow 의 modal: true 속성을 이용한다.


디자인

  jQuery UI 를 사용하지 않음에 따라, 에리엔진 리워크에서 공통적으로 사용될 템플릿을 추가한다.
  디렉토리 구조는 Vue.js의 TreeView 기능을 이용한다.


데이터관리

  모든 데이터는 Vue.js를 이용하여 Kernel 에서 관리한다.
  이는 각 모달 간 데이터 관리를 좀 더 수월하게 할 수 있게 도와줄 것이다.
  모달간 데이터 관리는 Electron.IPC를 이용하여 비동기 통신을 사용한다.


스크립트
  
  기존 스크립트에선 특정 단어를 치환하는 과정이 까다로웠다.
  때문에 키워드 기능을 이용하여 해결했는데, 


다국어 지원


환경설정


튜토리얼

<< 에리엔진 리워크 사양 >>


  주요 플랫폼

    사용자 인터페이스: VueJS
    데이터 트리뷰: clusterize.js (https://clusterize.js.org/)
    렌더링 엔진: LveJS


프로젝트 UUID

  모든 프로젝트는 UUID를 가지고 있다.
  이는 추후 앱으로 빌드할 때 고유식별인 appId를 UUID을 활용하여 만들도록 한다.

  프로젝트는 생성 시, 폴더 지정을 하도록 한다.
  열때는 폴더를 열도록 한다.


모듈 시스템

  추가/제거가 가능해야한다.
  각 프로젝트 폴더에는 Modules 폴더가 존재하며, 이곳에 각 모듈 폴더가 UUID로 존재한다.


인터페이스
스크립트
디자인
키워드
에셋

  각 에셋은 디렉토리에 분류되어 파일로 저장된다.


히스토리

  모든 작업은 상태(statement)로 관리되며, 이는 Object 형태로 존재한다.
  배열에 이 상태들이 저장되며, POP, PUSH로 히스토리를 관리한다.


저장

  저장은 파일 단위로 저장하여 프로젝트 폴더에 저장되며,
  파일을 수정하기 위해 열였을 경우, 임시 폴더에 저장한다. 이는 저장할 때 삭제된다.
  
  확장자와 내용물은 아래와 같다.

  Game (esg)
    UUID
    Name
    Version,
    Developer

  Asset (esa)
    UUID
    MIME

  Script (ess)
    UUID
    Comment
    Events []
    Conditions []
    Actions []
    Next []

  Design (esd)
    UUID
    AssetId

  Interface (esi)
    UUID
    DesignId
    Style {}
  

삭제

  모든 데이터는 파일 단위로 저장하며, 파일삭제시 영구 삭제가 아니라, 휴지통으로 이동된다.
  이는 사용자가 파일을 잘못 삭제하더라도 직접 복구할 수 있게 도움을 준다.


저장/디렉토리 구조

  디렉토리에 모듈 디렉토리가 존재할 경우, 디렉토리 내부의 내용을 재귀함수를 이용하여 불러들인다.

  프로젝트 디렉토리 (UUID)
    Save
      기본 디렉토리 (UUID, 프로젝트 디렉토리명과 같다)
        Assets
          ...에셋 파일들 (esa)
        Designs
          ...디자인 파일들 (esd)
        Interfaces
          ...인터페이스 파일들 (esi)
        Scripts
          ...스크립트 파일들 (ess)

      모듈 디렉토리
        기본 디렉토리 (UUID)
          Assets
            ...에셋 파일들
    Backup
      ...[ package_${timestamp}.esp ]


백업

  단일 파일 형식으로 데이터를 관리하기 때문에 백업을 지원하지 않는다.


데이터 선택

  스크립트 작성 시, 아이템 목록을 보여주는 방식은 TreeView 방식으로 보여주도록 한다.
  TreeView 에서 아이템 선택 시, 아이템 이름이 아닌 UUID가 선택된다.


TreeView

  데이터의 TreeView는 경로를 정할 수 있다.
    인터페이스: 만들어진 객체의 씬의 레벨을 경로 단위로 삼음 (Ex. 플레이::학교::교실 → 플레이/학교/교실)
    디자인: 사용자 지정
    에셋: 사용자 지정
    키워드: 특수문자 > 숫자 > abcd > 가나다라마바사 등 처럼 sort 순

  TreeView 에서는 디렉토리/파일 생성 버튼을 지원해야 한다.
  이는 현재 TreeView 에서 선택한 디렉토리를 기점으로 새로이 추가된다. 선택되지 않았다면 루트 디렉토리로 선택된다.
  아이템은 우클릭 - 컨텍스트메뉴에서 삭제할 수 있으며, Shift, Ctrl 등의 보조 기능을 이용하여 다수 선택할 수 있어야 한다.
  파일 및 디렉토리는 이름의 오름차순으로 정렬된다.


모달

  Electron 내부모듈인 Menu, MenuItem 등을 이용하여 메뉴와 컨텍스트 메뉴를 구성한다.
  새창은 더 이상 jQuery UI 를 사용하지 않고, BrowserWindow 의 modal: true 속성을 이용한다.


디자인

  jQuery UI 를 사용하지 않음에 따라, 에리엔진 리워크에서 공통적으로 사용될 템플릿을 추가한다.
  디렉토리 구조는 Vue.js의 TreeView 기능을 이용한다.


데이터관리

  모든 데이터는 Vue.js를 이용하여 Kernel 에서 관리한다.
  이는 각 모달 간 데이터 관리를 좀 더 수월하게 할 수 있게 도와줄 것이다.
  모달간 데이터 관리는 Electron.IPC를 이용하여 비동기 통신을 사용한다.


스크립트
  
  기존 스크립트에선 특정 단어를 치환하는 과정이 까다로웠다.
  때문에 키워드 기능을 이용하여 해결했는데, 키워드 기능은 더이상 이용하지 않는다.
  모든 텍스트 입력은 직접 입력하는 방식으로 해결하지만, 대신 옆에서 언어를 추가/지정할 수 있다.


다국어 지원

  기존의 키워드 개념을 삭제하고, 모든 데이터를 개발자가 수동으로 입력한다.
  입력 과정에서 사이드 탭에 언어를 선택/입력 가능하며, 다중 언어를 지원할 수 있도록 한다.


환경설정


튜토리얼
